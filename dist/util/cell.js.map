{"version":3,"file":"cell.js","sources":["../../src/util/cell.ts"],"sourcesContent":["import { tracked } from '@glimmer/tracking';\nimport { assert } from '@ember/debug';\n\ninterface GlintRenderable {\n  /**\n   * Cells aren't inherently understood by Glint,\n   * so to work around that, we'll hook in to the fact that\n   * ContentValue (the type expected for all renderables),\n   * defines an interface with this signature.\n   *\n   * (SafeString)\n   *\n   * There *has* been interest in the community to formally support\n   * toString and toHTML APIs across all objects. An RFC needs to be\n   * written so that we can gather feedback / potential problems.\n   */\n  toHTML(): string;\n}\n\nexport class Cell<Value = unknown> implements GlintRenderable {\n  @tracked declare current: Value;\n\n  toHTML(): string {\n    assert(\n      'Not a valid API. Please access either .current or .read() if the value of this Cell is needed'\n    );\n  }\n\n  constructor();\n  constructor(initialValue: Value);\n  constructor(initialValue?: Value) {\n    if (initialValue !== undefined) {\n      this.current = initialValue;\n    }\n  }\n\n  /**\n   * Toggles the value of `current` only if\n   * `current` is a boolean -- errors otherwise\n   */\n  toggle = () => {\n    assert(\n      `toggle can only be used when 'current' is a boolean type`,\n      typeof this.current === 'boolean' || this.current === undefined\n    );\n\n    (this.current as boolean) = !this.current;\n  };\n\n  /**\n   * Updates the value of `current`\n   * by calling a function that receives the previous value.\n   */\n  update = (updater: (prevValue: Value) => Value) => {\n    this.current = updater(this.current);\n  };\n\n  /**\n   * Updates the value of `current`\n   */\n  set = (nextValue: Value) => {\n    this.current = nextValue;\n  };\n\n  /**\n   * Returns the current value.\n   */\n  read = () => this.current;\n}\n\n/**\n * <div class=\"callout note\">\n *\n * This is not a core part of ember-resources, but is a useful utility when working with Resources. This utility is still under the broader library's SemVer policy. Additionally, the \"Cell\" is a core concept in Starbeam. See [Cells in Starbeam](https://www.starbeamjs.com/guides/fundamentals/cells.html)\n *\n * </div>\n *\n *\n * Small state utility for helping reduce the number of imports\n * when working with resources in isolation.\n *\n * The return value is an instance of a class with a single\n * `@tracked` property, `current`. If `current` is a boolean,\n * there is a `toggle` method available as well.\n *\n * For example, a Clock:\n *\n * ```js\n * import { resource, cell } from 'ember-resources';\n *\n * const Clock = resource(({ on }) => {\n *   let time = cell(new Date());\n *   let interval = setInterval(() => time.current = new Date(), 1000);\n *\n *   on.cleanup(() => clearInterval(interval));\n *\n *   let formatter = new Intl.DateTimeFormat('en-US', {\n *     hour: 'numeric',\n *     minute: 'numeric',\n *     second: 'numeric',\n *     hour12: true,\n *   });\n *\n *   return () => formatter.format(time.current);\n * });\n *\n * <template>\n *   It is: <time>{{Clock}}</time>\n * </template>\n * ```\n *\n * Additionally, cells can be directly rendered:\n * ```js\n * import { resource, cell } from 'ember-resources';\n *\n * const value = cell(0);\n *\n * <template>\n *    {{value}}\n * </template>\n * ```\n *\n */\nexport function cell<Value = unknown>(initialValue?: Value): Cell<Value> {\n  if (initialValue !== undefined) {\n    return new Cell(initialValue as Value);\n  }\n\n  return new Cell();\n}\n\n// @ts-ignore\nimport { capabilities as helperCapabilities, setHelperManager } from '@ember/helper';\n\nclass CellManager {\n  capabilities = helperCapabilities('3.23', {\n    hasValue: true,\n  });\n\n  createHelper(cell: Cell) {\n    return cell;\n  }\n\n  getValue(cell: Cell) {\n    return cell.current;\n  }\n}\n\nconst cellEvaluator = new CellManager();\n\nsetHelperManager(() => cellEvaluator, Cell.prototype);\n"],"names":["Cell","_class","toHTML","assert","constructor","initialValue","_initializerDefineProperty","_descriptor","_defineProperty","current","undefined","updater","nextValue","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","cell","CellManager","helperCapabilities","hasValue","createHelper","getValue","cellEvaluator","setHelperManager"],"mappings":";;;;;;;AAmBA,IAAaA,IAAI,IAAAC,MAAA,GAAV,MAAMD,IAAI,CAA6C;AAG5DE,EAAAA,MAAMA,GAAW;IACfC,MAAM,CACJ,+FACF,CAAC,CAAA;AACH,GAAA;EAIAC,WAAWA,CAACC,YAAoB,EAAE;AAAAC,IAAAA,0BAAA,kBAAAC,WAAA,EAAA,IAAA,CAAA,CAAA;AAMlC;AACF;AACA;AACA;AAHEC,IAAAA,eAAA,iBAIS,MAAM;AACbL,MAAAA,MAAM,CACH,CAAA,wDAAA,CAAyD,EAC1D,OAAO,IAAI,CAACM,OAAO,KAAK,SAAS,IAAI,IAAI,CAACA,OAAO,KAAKC,SACxD,CAAC,CAAA;AAEA,MAAA,IAAI,CAACD,OAAO,GAAe,CAAC,IAAI,CAACA,OAAO,CAAA;KAC1C,CAAA,CAAA;AAED;AACF;AACA;AACA;IAHED,eAAA,CAAA,IAAA,EAAA,QAAA,EAIUG,OAAoC,IAAK;MACjD,IAAI,CAACF,OAAO,GAAGE,OAAO,CAAC,IAAI,CAACF,OAAO,CAAC,CAAA;KACrC,CAAA,CAAA;AAED;AACF;AACA;IAFED,eAAA,CAAA,IAAA,EAAA,KAAA,EAGOI,SAAgB,IAAK;MAC1B,IAAI,CAACH,OAAO,GAAGG,SAAS,CAAA;KACzB,CAAA,CAAA;AAED;AACF;AACA;AAFEJ,IAAAA,eAAA,CAGO,IAAA,EAAA,MAAA,EAAA,MAAM,IAAI,CAACC,OAAO,CAAA,CAAA;IApCvB,IAAIJ,YAAY,KAAKK,SAAS,EAAE;MAC9B,IAAI,CAACD,OAAO,GAAGJ,YAAY,CAAA;AAC7B,KAAA;AACF,GAAA;AAkCF,CAAC,GAAAE,WAAA,GAAAM,yBAAA,CAAAZ,MAAA,CAAAa,SAAA,EAAA,SAAA,EAAA,CAhDEC,OAAO,CAAA,EAAA;EAAAC,YAAA,EAAA,IAAA;EAAAC,UAAA,EAAA,IAAA;EAAAC,QAAA,EAAA,IAAA;EAAAC,WAAA,EAAA,IAAA;AAAA,CAAA,CAAA,GAAAlB,MAAA,EAAA;;AAkDV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASmB,IAAIA,CAAkBf,YAAoB,EAAe;EACvE,IAAIA,YAAY,KAAKK,SAAS,EAAE;AAC9B,IAAA,OAAO,IAAIV,IAAI,CAACK,YAAqB,CAAC,CAAA;AACxC,GAAA;EAEA,OAAO,IAAIL,IAAI,EAAE,CAAA;AACnB,CAAA;AAKA,MAAMqB,WAAW,CAAC;EAAAjB,WAAA,GAAA;AAAAI,IAAAA,eAAA,CACDc,IAAAA,EAAAA,cAAAA,EAAAA,YAAkB,CAAC,MAAM,EAAE;AACxCC,MAAAA,QAAQ,EAAE,IAAA;AACZ,KAAC,CAAC,CAAA,CAAA;AAAA,GAAA;EAEFC,YAAYA,CAACJ,IAAU,EAAE;AACvB,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;EAEAK,QAAQA,CAACL,IAAU,EAAE;IACnB,OAAOA,IAAI,CAACX,OAAO,CAAA;AACrB,GAAA;AACF,CAAA;AAEA,MAAMiB,aAAa,GAAG,IAAIL,WAAW,EAAE,CAAA;AAEvCM,gBAAgB,CAAC,MAAMD,aAAa,EAAE1B,IAAI,CAACc,SAAS,CAAC;;;;"}