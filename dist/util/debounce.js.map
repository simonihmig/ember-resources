{"version":3,"file":"debounce.js","sources":["../../src/util/debounce.ts"],"sourcesContent":["import { tracked } from '@glimmer/tracking';\n\nimport { resource } from '../core';\n\nclass TrackedValue<T> {\n  @tracked value: T | undefined;\n}\n\n/**\n * <div class=\"callout note\">\n *\n * This is not a core part of ember-resources, but is an example utility to demonstrate a concept when authoring your own resources. However, this utility is still under the broader library's SemVer policy.\n *\n * A consuming app will not pay for the bytes of this utility unless imported.\n *\n * </div>\n *\n * A utility for debouncing high-frequency updates.\n * The returned value will only be updated every `ms` and is\n * initially undefined.\n *\n * This can be useful when a user's typing is updating a tracked\n * property and you want to derive data less frequently than on\n * each keystroke.\n *\n * Note that this utility requires the `@use` decorator\n * (debounce could be implemented without the need for the `@use` decorator\n * but the current implementation is 8 lines)\n *\n * @example\n * ```js\n *  import Component from '@glimmer/component';\n *  import { tracked } from '@glimmer/tracking';\n *  import { debounce } from 'ember-resources/util/debounce';\n *\n *  const delay = 100; // ms\n *\n *  class Demo extends Component {\n *    @tracked userInput = '';\n *\n *    @use debouncedInput = debounce(delay, () => this.userInput);\n *  }\n * ```\n *\n * @example\n * This could be further composed with RemoteData\n * ```js\n *  import Component from '@glimmer/component';\n *  import { tracked } from '@glimmer/tracking';\n *  import { debounce } from 'ember-resources/util/debounce';\n *  import { RemoteData } from 'ember-resources/util/remote-data';\n *\n *  const delay = 100; // ms\n *\n *  class Demo extends Component {\n *    @tracked userInput = '';\n *\n *    @use debouncedInput = debounce(delay, () => this.userInput);\n *\n *    @use search = RemoteData(() => `https://my.domain/search?q=${this.debouncedInput}`);\n *  }\n * ```\n *\n * @param {number} ms delay in milliseconds to wait before updating the returned value\n * @param {() => Value} thunk function that returns the value to debounce\n */\nexport function debounce<Value = unknown>(ms: number, thunk: () => Value) {\n  let lastValue: Value;\n  let timer: number;\n  let state = new TrackedValue<Value>();\n\n  return resource(({ on }) => {\n    lastValue = thunk();\n\n    on.cleanup(() => timer && clearTimeout(timer));\n    timer = setTimeout(() => (state.value = lastValue), ms);\n\n    return state.value;\n  });\n}\n"],"names":["TrackedValue","_class","constructor","_initializerDefineProperty","_descriptor","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","debounce","ms","thunk","lastValue","timer","state","resource","on","cleanup","clearTimeout","setTimeout","value"],"mappings":";;;;;;;;;;;AAEmC,IAE7BA,YAAY,IAAAC,MAAA,GAAlB,MAAMD,YAAY,CAAI;EAAAE,WAAA,GAAA;AAAAC,IAAAA,0BAAA,gBAAAC,WAAA,EAAA,IAAA,CAAA,CAAA;AAAA,GAAA;AAEtB,CAAC,GAAAA,WAAA,GAAAC,yBAAA,CAAAJ,MAAA,CAAAK,SAAA,EAAA,OAAA,EAAA,CADEC,OAAO,CAAA,EAAA;EAAAC,YAAA,EAAA,IAAA;EAAAC,UAAA,EAAA,IAAA;EAAAC,QAAA,EAAA,IAAA;EAAAC,WAAA,EAAA,IAAA;AAAA,CAAA,CAAA,GAAAV,MAAA,CAAA,CAAA;AAGV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASW,QAAQA,CAAkBC,EAAU,EAAEC,KAAkB,EAAE;AACxE,EAAA,IAAIC,SAAgB,CAAA;AACpB,EAAA,IAAIC,KAAa,CAAA;AACjB,EAAA,IAAIC,KAAK,GAAG,IAAIjB,YAAY,EAAS,CAAA;EAErC,OAAOkB,QAAQ,CAAC,CAAC;AAAEC,IAAAA,EAAAA;AAAG,GAAC,KAAK;IAC1BJ,SAAS,GAAGD,KAAK,EAAE,CAAA;IAEnBK,EAAE,CAACC,OAAO,CAAC,MAAMJ,KAAK,IAAIK,YAAY,CAACL,KAAK,CAAC,CAAC,CAAA;IAC9CA,KAAK,GAAGM,UAAU,CAAC,MAAOL,KAAK,CAACM,KAAK,GAAGR,SAAU,EAAEF,EAAE,CAAC,CAAA;IAEvD,OAAOI,KAAK,CAACM,KAAK,CAAA;AACpB,GAAC,CAAC,CAAA;AACJ;;;;"}